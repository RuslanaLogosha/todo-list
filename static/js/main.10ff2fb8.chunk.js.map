{"version":3,"sources":["components/TodoList/todoList.js","components/TodoEditor/todoEditor.js","components/Filter.js","components/Container/container.js","App.js","reportWebVitals.js","index.js"],"names":["TodoList","todos","onDeleteTodo","onToggleCompleted","className","map","id","text","completed","classNames","type","checked","onChange","onClick","TodoEditor","state","message","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","this","Component","Filter","Container","children","App","initialTodos","filter","addTodo","todo","shortid","generate","deleteTodo","todoId","prevState","toggleCompleted","changeFilter","getVisibleTodos","normalizedFilter","toLowerCase","includes","calculateCompletedTodos","reduce","total","totalTodoCount","length","completedTodoCount","visibleTodos","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10ff2fb8.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport './todoList.scss';\n\nconst TodoList = ({ todos, onDeleteTodo, onToggleCompleted }) => (\n  <ul className=\"TodoList\">\n    {todos.map(({ id, text, completed }) => (\n      <li\n        key={id}\n        className={classNames('TodoList__item', {\n          'TodoList__item--completed': completed,\n        })}\n      >\n        <input\n          type=\"checkbox\"\n          className=\"TodoList__checkbox\"\n          checked={completed}\n          onChange={() => onToggleCompleted(id)}\n        />\n        <p className=\"TodoList__text\">{text}</p>\n        <button\n          type=\"button\"\n          className=\"TodoList__btn\"\n          onClick={() => onDeleteTodo(id)}\n        >\n          Удалить\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default TodoList;","import React, { Component } from 'react';\nimport './todoEditor.scss';\n\nclass TodoEditor extends Component {\n  state = {\n    message: '',\n  };\n\n  handleChange = e => {\n    this.setState({ message: e.currentTarget.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state.message);\n\n    this.setState({ message: '' });\n  };\n\n  render() {\n    return (\n      <form className=\"TodoEditor\" onSubmit={this.handleSubmit}>\n        <textarea\n          className=\"TodoEditor__textarea\"\n          value={this.state.message}\n          onChange={this.handleChange}\n        ></textarea>\n        <button type=\"submit\" className=\"TodoEditor__button\">\n          Сохранить\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default TodoEditor;","import React from 'react';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Фильтр по имени\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nexport default Filter;","\nimport React from 'react';\nimport './container.scss';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;","import React, { Component } from 'react';\nimport shortid from 'shortid';\n\nimport TodoList from './components/TodoList/todoList';\nimport TodoEditor from './components/TodoEditor/todoEditor';\nimport initialTodos from './components/TodoList/todos.json';\nimport Filter from './components/Filter';\nimport Container from './components/Container/container';\n\n\n\nclass App extends Component {\n  state = {\n    todos: initialTodos,\n    filter: '',\n  };\n\n  addTodo = text => {\n    const todo = {\n      id: shortid.generate(),\n      text,\n      completed: false,\n    };\n\n    this.setState(({ todos }) => ({\n      todos: [todo, ...todos],\n    }));\n  };\n\n  deleteTodo = todoId => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  };\n\n  toggleCompleted = todoId => {\n    // this.setState(prevState => ({\n    //   todos: prevState.todos.map(todo => {\n    //     if (todo.id === todoId) {\n    //       return {\n    //         ...todo,\n    //         completed: !todo.completed,\n    //       };\n    //     }\n\n    //     return todo;\n    //   }),\n    // }));\n\n    this.setState(({ todos }) => ({\n      todos: todos.map(todo =>\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo,\n      ),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getVisibleTodos = () => {\n    const { filter, todos } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return todos.filter(todo =>\n      todo.text.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  calculateCompletedTodos = () => {\n    const { todos } = this.state;\n\n    return todos.reduce(\n      (total, todo) => (todo.completed ? total + 1 : total),\n      0,\n    );\n  };\n\n  render() {\n    const { todos, filter } = this.state;\n    const totalTodoCount = todos.length;\n    const completedTodoCount = this.calculateCompletedTodos();\n    const visibleTodos = this.getVisibleTodos();\n\n    return (\n      <Container>\n        {/* TODO: вынести в отдельный компонент */}\n\n        <div>\n          <p>Всего заметок: {totalTodoCount}</p>\n          <p>Выполнено: {completedTodoCount}</p>\n        </div>\n\n        <TodoEditor onSubmit={this.addTodo} />\n\n        <Filter value={filter} onChange={this.changeFilter} />\n\n        <TodoList\n          todos={visibleTodos}\n          onDeleteTodo={this.deleteTodo}\n          onToggleCompleted={this.toggleCompleted}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}